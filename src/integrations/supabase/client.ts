// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

// Export these constants so they can be accessed by environment.ts
export const SUPABASE_URL = "https://ekpiqiatfwozmepkgbbe.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVrcGlxaWF0Zndvem1lcGtnYmJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk2OTc3MzYsImV4cCI6MjA1NTI3MzczNn0.qPD707Lp5FiAjlQwfC1bbG-O2WuNUe_ZYRjox6Dmb-Y";

// Also try to get values from environment variables (for compatibility)
const ENV_SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || SUPABASE_URL;
const ENV_SUPABASE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || SUPABASE_PUBLISHABLE_KEY;

// Log which source we're using
console.log('Supabase client initialization:', {
  url_source: import.meta.env.VITE_SUPABASE_URL ? 'env' : 'hardcoded',
  key_source: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'env' : 'hardcoded',
  url_prefix: ENV_SUPABASE_URL.substring(0, 10) + '...',
  key_valid: Boolean(ENV_SUPABASE_KEY && ENV_SUPABASE_KEY.length > 50 && ENV_SUPABASE_KEY.startsWith('eyJ'))
});

// Enhanced fetch with retry logic and timeout
const enhancedFetch = async (url: RequestInfo | URL, init?: RequestInit) => {
  const MAX_RETRIES = 3;
  const RETRY_DELAY = 1000;
  const TIMEOUT = 15000; // 15 seconds timeout
  
  let lastError;
  
  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      // Create abort controller for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), TIMEOUT);
      
      // Ensure the Authorization header is properly set for Supabase
      // This is critical as Supabase requires the API key in a specific format
      const headers = {
        ...init?.headers,
        'apikey': ENV_SUPABASE_KEY,
        'Authorization': `Bearer ${ENV_SUPABASE_KEY}`,
        'x-client-info': 'emotions-app',
        'Content-Type': 'application/json',
        'pragma': 'no-cache',
        'cache-control': 'no-cache'
      };
      
      // Add signal to request init
      const modifiedInit = {
        ...init,
        signal: controller.signal,
        headers
      };
      
      // Execute fetch
      const response = await fetch(url, modifiedInit);
      
      // Clear timeout
      clearTimeout(timeoutId);
      
      return response;
    } catch (error: any) {
      lastError = error;
      console.error(`Supabase fetch attempt ${attempt} failed:`, error);
      
      // Retry only for network-related errors or timeouts
      if (
        error.name === 'AbortError' || 
        error.name === 'TypeError' || 
        error.message?.includes('fetch') || 
        error.message?.includes('network') ||
        !navigator.onLine
      ) {
        console.log(`Retrying fetch in ${RETRY_DELAY * attempt}ms...`);
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY * attempt));
        continue;
      }
      
      throw error;
    }
  }
  
  throw lastError || new Error('Failed to fetch after retries');
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient(ENV_SUPABASE_URL, ENV_SUPABASE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    fetch: enhancedFetch,
    headers: {
      'apikey': ENV_SUPABASE_KEY,
      'Authorization': `Bearer ${ENV_SUPABASE_KEY}`,
      'x-client-info': 'emotions-app'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    timeout: 30000 // 30 seconds timeout for realtime subscriptions
  }
});