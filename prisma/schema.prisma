// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  moodEntries      MoodEntry[]
  journalEntries   JournalEntry[]
  stressAssessments StressAssessment[]
  bookings         Booking[]
  reviews          Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MoodEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  score     Float
  mood      String
  notes     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model JournalEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  content   String   @db.Text
  mood      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model StressAssessment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  score     Int
  symptoms  String[]
  triggers  String[]
  notes     String?  @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Booking {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  ambassadorId  String
  date          DateTime
  time          String
  status        String   @default("PENDING")
  notes         String?  @db.Text
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ambassador    Ambassador @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)
  review        Review?

  @@index([userId])
  @@index([ambassadorId])
  @@index([date])
}

model Ambassador {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  email       String   @unique
  bio         String   @db.Text
  specialties String[]
  image       String?
  bookings    Booking[]
  reviews     Review[]

  @@index([email])
}

model Review {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  ambassadorId String
  bookingId    String   @unique
  rating       Int
  comment      String   @db.Text
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ambassador   Ambassador @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ambassadorId])
  @@index([bookingId])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  userType    String   @default("user")
  type        String   @default("system")
  title       String?
  content     String
  read        Boolean  @default(false)
  avatar      String?
  senderName  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  notificationPreferences Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
} 